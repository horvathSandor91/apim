trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:

  ACR_NAME: 'acrshszsanyi'
  IMAGE_NAME: 'mywebapp:$(Build.BuildId)'
  bkstrgrg: 'rg-sanhorva'
  bkstrg: 'sasanhorva'
  bkcontainer: 'tfstate-shsz-03'
  prefix: 'shsz'
  #bkstrgkey: 'terraform.tfstate'
  IMAGE_REPO: interiordesign/apim
  IMAGE_REPOSITORY: 'crshszsanyi.azurecr.io/mywebapp'
  TAG: '$(Build.BuildId)'

stages:
# build the docker image and push it to dockerhub
  - stage: Build
    displayName: BuildAppDH
    jobs:
      - job: BuildPushImageDockerHub
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockerhub'
            repository: '$(IMAGE_REPO)'
            command: 'buildAndPush'
            Dockerfile: '$(Build.SourcesDirectory)/app_dh/Dockerfile'

        # Publish the manifests as artifacts
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Pipeline.Workspace)/s/app_dh'
            artifact: 'manifests_dh'
            publishLocation: 'pipeline'

  - stage: Test
    displayName: 'Test Docker Image'
    dependsOn: Build
    jobs:
    - job: Test
      displayName: 'Test Docker Image'
      steps:
      - checkout: self
   #   - task: Docker@2
   #     inputs:
   #       containerRegistry: 'dockerhub'
   #       repository: '$(IMAGE_REPO)'
   #       Dockerfile: '$(Build.SourcesDirectory)/app_dh/Dockerfile'
      - script:
         docker pull '$(IMAGE_REPO)':'$(TAG)'


  - stage: BuildAppACR
    dependsOn: [] 
    jobs:
      - job: BuildPushImageACR
        steps: 
        - task: AzureCLI@2
          displayName: 'Build and push Docker image'
          inputs:
            azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            addSpnToEnvironment: true
            inlineScript: |
              docker build -t '$(ACR_NAME)'.azurecr.io/'$(IMAGE_NAME)' -f ./app_acr/Dockerfile .
              az acr login --name '$(ACR_NAME)'
              docker tag '$(IMAGE_NAME)' '$(ACR_NAME)'.azurecr.io/'$(IMAGE_NAME)'
              docker push '$(ACR_NAME)'.azurecr.io/'$(IMAGE_NAME)'
  
          # Publish the manifests as artifacts
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Pipeline.Workspace)/s/app_acr'
            artifact: 'manifests_acr'
            publishLocation: 'pipeline'

 # - stage: Test
 #   displayName: 'Test Stage'
 #   jobs:
 #   - job: Test
 #     displayName: 'Test Job'
 #     steps:
 #     - task: Docker@2
 #       displayName: 'Pull image from Azure Container Registry'
 #       inputs:
 #         containerRegistry: '$(ACR_NAME)' # Make sure to replace 'yourAzureContainerRegistryConnection' with the name of your ACR connection in Azure DevOps
 #         repository: '$(IMAGE_REPOSITORY)/$(IMAGE_NAME)' # Replace 'yourACRName' with your ACR name and 'yourImageName' with your image name
 #         command: 'start'

#  - stage: TestAppACR
#    dependsOn: BuildAppACR
#    jobs:
#      - job: TestImageACR
#        steps:
#        - task: Docker@2
#          displayName: 'Pull and run Docker image for testing'
#          inputs:
#            azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
#            containerRegistry: '$(ACR_NAME)'
#            repository: '$(IMAGE_REPOSITORY)'
#            command: 'login'
#            arguments: '-d' 

 # - stage: Test
 #   condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))
 #   jobs:
 #   - job: Test
 #     steps:
 #     - task: AzureRmWebAppDeployment@4
 #       inputs:
 #         ConnectionType: 'AzureRM'
 #         azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
 #         appType: 'webAppContainer'
 #         WebAppName: 'testsanyilinuxwebapp'
 #         DockerNamespace: 'crsanyi'
 #         DockerRepository: '$(IMAGE_REPOSITORY)'
 #         DockerImageTag: '$(TAG)'

  - stage: dynamic_number
    jobs:
      - job: Dynamic_number
        steps:
        - task: AzureCLI@2
          name: dynamic_number
          displayName: 'increment'
          inputs:
            azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              storage_account_name='sasanhorva'
              table_name='shszsatable'
              latest_number=$((10#$(az storage entity query --account-name $storage_account_name --table-name $table_name --query "items[-1].RowKey" -o tsv --only-show-errors)))
              echo "Latest Number: $latest_number"
              postfix=$(printf "%03d" $((latest_number + 1)))
              latest_number=$(printf "%03d" $((latest_number)))
              az storage entity insert --account-name $storage_account_name --table-name $table_name --entity PartitionKey=currentid RowKey=$postfix
              az storage entity delete --account-name $storage_account_name --table-name $table_name --partition-key currentid --row-key $latest_number
              echo "Next Number: $postfix"
              echo "##vso[task.setvariable variable=postfix;isOutput=true]$postfix"
              echo "prefix value: $(prefix)"
              echo bkstrg value: $(bkstrg)
              echo bkstrgrg value: $(bkstrgrg)
              echo "postfix value: $postfix"
              bkstrgkey="$(prefix)-${postfix}.tfstate"
              echo "##vso[task.setvariable variable=bkstrgkey;isOutput=true]$bkstrgkey"
              echo "bkstrgkey: $bkstrgkey"

  - stage: tfdeploy
    dependsOn: dynamic_number 
    variables:
      postfix: $[ stageDependencies.dynamic_number.dynamic_number.outputs['dynamic_number.postfix'] ]
      bkstrgkey: $[ stageDependencies.dynamic_number.dynamic_number.outputs['dynamic_number.bkstrgkey'] ]
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: sanyi-destroy
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - bash: |
                # Output: Terraform variables 
                TFOPTIONS=$(cat <<SETVAR
                  -var="postfix=$postfix" \
                  -var="prefix=$prefix" 
                SETVAR
                )
                TFOPTIONS=$(sed 's|-var="[a-zA-Z0-9_]*="||g' <<< $TFOPTIONS)
                #TFOPTIONS+=" -var=\"postfix=$(postfix)\""
                echo "postfix value: $postfix"
                echo "prefix value: $prefix"
                echo "tfoptions value: $TFOPTIONS"
                echo "##vso[task.setvariable variable=tfoptions;isOutput=true]$TFOPTIONS"
              displayName: 'Print variables' 
              name: 'setvarStep'
              env:
                postfix: $(postfix)
                prefix: $(prefix)
                
            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
              displayName: tfinstall
              inputs:
                terraformVersion: 'latest'

            - bash: |
                echo "Prefix value: $(prefix)"
                echo "strgkey: $(bkstrgkey)"
              displayName: 'Print Prefix Value'
              condition: succeeded() # it's the default value
               
            - task: TerraformTaskV4@4
              displayName: 'init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                backendServiceArm: 'ZEISSgroup-DI05-ASM-Learning'
                backendAzureRmResourceGroupName: '$(bkstrgrg)'
                backendAzureRmStorageAccountName: '$(bkstrg)'
                backendAzureRmContainerName: '$(bkcontainer)'
                backendAzureRmKey: '$(bkstrgkey)'

            - task: TerraformTaskV4@4
              displayName: validate
              inputs:
                provider: 'azurerm'
                command: 'validate'

            - bash: |
                echo "Prefix value: $(prefix)"
                echo "Postfix value: $(postfix)"
                echo "strgkey: $(bkstrgkey)"
              displayName: 'Print Prefix & Postfix Value'
              condition: succeeded()  # it's the default value

            - task: TerraformTaskV4@4
              displayName: plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                commandOptions: '$(setvarStep.tfoptions) -out=$(System.DefaultWorkingDirectory)/main.tfplan'
                environmentServiceNameAzureRM: 'ZEISSgroup-DI05-ASM-Learning'

            - bash: |
                echo "Prefix value: $(prefix)"
                echo "Postfix value: $(postfix)"
                echo "strgkey: $(bkstrgkey)"
              displayName: 'Print Prefix & Postfix Value'

            - task: TerraformTaskV4@4
              displayName: apply
              inputs:
                provider: 'azurerm'
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                commandOptions: 'main.tfplan'
                environmentServiceNameAzureRM: 'ZEISSgroup-DI05-ASM-Learning'

stages:
- stage: PreDestroyTasks
  displayName: Pre-Destroy Tasks
  jobs:
  - job: UnlockAndRemoveTerraformState
    displayName: Unlock and Remove Terraform State
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Unlock and Remove Terraform State'
      inputs:
        targetType: 'inline'
        script: |
          echo "Removing TFState file for ${STAGE}"
          
          AZSAKEY=$(az storage account keys list -g "${{ variables.bkstrgrg }}" -n "${{ variables.bkstrg }}" --only-show-errors | jq -r '[.[] | select(.permissions == "FULL") | .value] | .[0]')
          
          if [[ ! -z $AZSAKEY ]]; then
            echo "Checking Terraform state file for CI Stage $STAGE"
            
            TFSTATE=$(az storage blob list --container-name tfstate --account-name "${{ variables.bkstrg }}" --account-key "${AZSAKEY}" --only-show-errors --query "[?(name=='$STAGE.tfstate')].{TFSFile:name,Status:(properties.lease.status)}" -o json 2>/dev/null | jq -c '.[]')
            
            if [[ $(jq -r '.Status' <<< "${TFSTATE}") == "locked" ]]; then
              echo "TFState is locked, breaking lease: " $(jq -c '.' <<< "${TFSTATE}")
              az storage blob lease break --blob-name $(jq -r '.TFSFile' <<< "${TFSTATE}") --container-name tfstate --account-name "${{ variables.bkstrg }}" --account-key "${AZSAKEY}" --only-show-errors
            fi
            
            echo "Delete CI STAGE: $STAGE.tfstate"
            az storage fs file delete -p "/${STAGE}.tfstate" --auth-mode key -f tfstate --account-name "${{ variables.bkstrg }}" --account-key "${AZSAKEY }}" --yes --only-show-errors
          fi

  - stage: tfdestroy
    displayName: tfdestroy stage
    dependsOn: 
    - dynamic_number
    - tfdeploy
    condition:  always()
    variables:
      postfix: $[ stageDependencies.dynamic_number.dynamic_number.outputs['dynamic_number.postfix'] ]
   #   tfoptions: $[ stageDependencies.tfdeploy.apply.outputs['setvarStep.tfoptions'] ]
      bkstrgkey: $[ stageDependencies.dynamic_number.dynamic_number.outputs['dynamic_number.bkstrgkey'] ]
    jobs:
    - deployment: Destroy
      displayName: Destroy
      environment: sanyi-destroy
      strategy:
        runOnce:
          deploy:
            steps:   
            - checkout: self
            - bash: |
                # Output: Terraform variables 
                TFOPTIONS=$(cat <<SETVAR
                  -var="postfix=$postfix" \
                  -var="prefix=$prefix" 
                SETVAR
                )
                TFOPTIONS=$(sed 's|-var="[a-zA-Z0-9_]*="||g' <<< $TFOPTIONS)
                #TFOPTIONS+=" -var=\"postfix=$(postfix)\""
                echo "postfix value: $postfix"
                echo "prefix value: $prefix"
                echo "tfoptions value: $TFOPTIONS"
                echo "##vso[task.setvariable variable=tfoptions;isOutput=true]$TFOPTIONS"
              displayName: 'Print variables'
              name: 'setvarStep'
              env:
                postfix: $(postfix)
                prefix: $(prefix)


            - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@1
              displayName: tfinstall
              inputs:
                terraformVersion: 'latest'
            - task: TerraformTaskV4@4
              displayName: 'init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: 'ZEISSgroup-DI05-ASM-Learning'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                backendAzureRmResourceGroupName: '$(bkstrgrg)'
                backendAzureRmStorageAccountName: '$(bkstrg)'
                backendAzureRmContainerName: '$(bkcontainer)'
                backendAzureRmKey: '$(bkstrgkey)'
            - task: TerraformTaskV4@4
              displayName: plan
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                commandOptions: '$(setvarStep.tfoptions) -destroy -out=$(System.DefaultWorkingDirectory)/main.tfplan'
                environmentServiceNameAzureRM: 'ZEISSgroup-DI05-ASM-Learning'

            - task: TerraformTaskV4@4
              displayName: destroy
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: 'main.tfplan'
                environmentServiceNameAzureRM: 'ZEISSgroup-DI05-ASM-Learning'

            - task: AzureCLI@2
              displayName: delete tfstate
              inputs:
                azureSubscription: 'ZEISSgroup-DI05-ASM-Learning'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az storage blob delete --account-name $(bkstrg) --container-name $(bkcontainer) --name $(bkstrgkey)